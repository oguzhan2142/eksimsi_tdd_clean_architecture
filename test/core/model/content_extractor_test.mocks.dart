// Mocks generated by Mockito 5.0.13 from annotations
// in eksimsi_tdd_clean_architecture/test/core/model/content_extractor_test.dart.
// Do not manually edit this file.

import 'dart:collection' as _i3;
import 'dart:math' as _i4;

import 'package:html/dom.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:source_span/source_span.dart' as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeIterator<E> extends _i1.Fake implements Iterator<E> {}

class _FakeNode extends _i1.Fake implements _i2.Node {}

class _FakeLinkedHashMap<K, V> extends _i1.Fake
    implements _i3.LinkedHashMap<K, V> {}

class _FakeNodeList extends _i1.Fake implements _i2.NodeList {}

/// A class which mocks [NodeList].
///
/// See the documentation for Mockito's code generation for more information.
class MockNodeList extends _i1.Mock implements _i2.NodeList {
  MockNodeList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  Iterator<_i2.Node> get iterator =>
      (super.noSuchMethod(Invocation.getter(#iterator),
          returnValue: _FakeIterator<_i2.Node>()) as Iterator<_i2.Node>);
  @override
  set length(int? value) =>
      super.noSuchMethod(Invocation.setter(#length, value),
          returnValueForMissingStub: null);
  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(Invocation.getter(#isNotEmpty), returnValue: false)
          as bool);
  @override
  _i2.Node get first =>
      (super.noSuchMethod(Invocation.getter(#first), returnValue: _FakeNode())
          as _i2.Node);
  @override
  set first(_i2.Node? value) =>
      super.noSuchMethod(Invocation.setter(#first, value),
          returnValueForMissingStub: null);
  @override
  _i2.Node get last =>
      (super.noSuchMethod(Invocation.getter(#last), returnValue: _FakeNode())
          as _i2.Node);
  @override
  set last(_i2.Node? value) =>
      super.noSuchMethod(Invocation.setter(#last, value),
          returnValueForMissingStub: null);
  @override
  _i2.Node get single =>
      (super.noSuchMethod(Invocation.getter(#single), returnValue: _FakeNode())
          as _i2.Node);
  @override
  Iterable<_i2.Node> get reversed => (super
          .noSuchMethod(Invocation.getter(#reversed), returnValue: <_i2.Node>[])
      as Iterable<_i2.Node>);
  @override
  void add(_i2.Node? value) =>
      super.noSuchMethod(Invocation.method(#add, [value]),
          returnValueForMissingStub: null);
  @override
  void addLast(_i2.Node? value) =>
      super.noSuchMethod(Invocation.method(#addLast, [value]),
          returnValueForMissingStub: null);
  @override
  void addAll(Iterable<_i2.Node>? collection) =>
      super.noSuchMethod(Invocation.method(#addAll, [collection]),
          returnValueForMissingStub: null);
  @override
  void insert(int? index, _i2.Node? value) =>
      super.noSuchMethod(Invocation.method(#insert, [index, value]),
          returnValueForMissingStub: null);
  @override
  _i2.Node removeLast() =>
      (super.noSuchMethod(Invocation.method(#removeLast, []),
          returnValue: _FakeNode()) as _i2.Node);
  @override
  _i2.Node removeAt(int? i) =>
      (super.noSuchMethod(Invocation.method(#removeAt, [i]),
          returnValue: _FakeNode()) as _i2.Node);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  void operator []=(int? index, _i2.Node? value) =>
      super.noSuchMethod(Invocation.method(#[]=, [index, value]),
          returnValueForMissingStub: null);
  @override
  void setRange(int? start, int? rangeLength, Iterable<_i2.Node>? from,
          [int? startFrom = 0]) =>
      super.noSuchMethod(
          Invocation.method(#setRange, [start, rangeLength, from, startFrom]),
          returnValueForMissingStub: null);
  @override
  void replaceRange(int? start, int? end, Iterable<_i2.Node>? newContents) =>
      super.noSuchMethod(
          Invocation.method(#replaceRange, [start, end, newContents]),
          returnValueForMissingStub: null);
  @override
  void removeRange(int? start, int? rangeLength) =>
      super.noSuchMethod(Invocation.method(#removeRange, [start, rangeLength]),
          returnValueForMissingStub: null);
  @override
  void removeWhere(bool Function(_i2.Node)? test) =>
      super.noSuchMethod(Invocation.method(#removeWhere, [test]),
          returnValueForMissingStub: null);
  @override
  void retainWhere(bool Function(_i2.Node)? test) =>
      super.noSuchMethod(Invocation.method(#retainWhere, [test]),
          returnValueForMissingStub: null);
  @override
  void insertAll(int? index, Iterable<_i2.Node>? collection) =>
      super.noSuchMethod(Invocation.method(#insertAll, [index, collection]),
          returnValueForMissingStub: null);
  @override
  bool remove(Object? item) => (super
          .noSuchMethod(Invocation.method(#remove, [item]), returnValue: false)
      as bool);
  @override
  _i2.Node operator [](int? index) =>
      (super.noSuchMethod(Invocation.method(#[], [index]),
          returnValue: _FakeNode()) as _i2.Node);
  @override
  String toString() => super.toString();
  @override
  _i2.Node elementAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#elementAt, [index]),
          returnValue: _FakeNode()) as _i2.Node);
  @override
  Iterable<_i2.Node> followedBy(Iterable<_i2.Node>? other) =>
      (super.noSuchMethod(Invocation.method(#followedBy, [other]),
          returnValue: <_i2.Node>[]) as Iterable<_i2.Node>);
  @override
  void forEach(void Function(_i2.Node)? action) =>
      super.noSuchMethod(Invocation.method(#forEach, [action]),
          returnValueForMissingStub: null);
  @override
  bool contains(Object? element) =>
      (super.noSuchMethod(Invocation.method(#contains, [element]),
          returnValue: false) as bool);
  @override
  bool every(bool Function(_i2.Node)? test) =>
      (super.noSuchMethod(Invocation.method(#every, [test]), returnValue: false)
          as bool);
  @override
  bool any(bool Function(_i2.Node)? test) =>
      (super.noSuchMethod(Invocation.method(#any, [test]), returnValue: false)
          as bool);
  @override
  _i2.Node firstWhere(bool Function(_i2.Node)? test,
          {_i2.Node Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#firstWhere, [test], {#orElse: orElse}),
          returnValue: _FakeNode()) as _i2.Node);
  @override
  _i2.Node lastWhere(bool Function(_i2.Node)? test,
          {_i2.Node Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#lastWhere, [test], {#orElse: orElse}),
          returnValue: _FakeNode()) as _i2.Node);
  @override
  _i2.Node singleWhere(bool Function(_i2.Node)? test,
          {_i2.Node Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#singleWhere, [test], {#orElse: orElse}),
          returnValue: _FakeNode()) as _i2.Node);
  @override
  String join([String? separator = r'']) => (super
          .noSuchMethod(Invocation.method(#join, [separator]), returnValue: '')
      as String);
  @override
  Iterable<_i2.Node> where(bool Function(_i2.Node)? test) =>
      (super.noSuchMethod(Invocation.method(#where, [test]),
          returnValue: <_i2.Node>[]) as Iterable<_i2.Node>);
  @override
  Iterable<T> whereType<T>() =>
      (super.noSuchMethod(Invocation.method(#whereType, []), returnValue: <T>[])
          as Iterable<T>);
  @override
  Iterable<T> map<T>(T Function(_i2.Node)? f) =>
      (super.noSuchMethod(Invocation.method(#map, [f]), returnValue: <T>[])
          as Iterable<T>);
  @override
  Iterable<T> expand<T>(Iterable<T> Function(_i2.Node)? f) =>
      (super.noSuchMethod(Invocation.method(#expand, [f]), returnValue: <T>[])
          as Iterable<T>);
  @override
  _i2.Node reduce(_i2.Node Function(_i2.Node, _i2.Node)? combine) =>
      (super.noSuchMethod(Invocation.method(#reduce, [combine]),
          returnValue: _FakeNode()) as _i2.Node);
  @override
  T fold<T>(T? initialValue, T Function(T, _i2.Node)? combine) =>
      (super.noSuchMethod(Invocation.method(#fold, [initialValue, combine]),
          returnValue: null) as T);
  @override
  Iterable<_i2.Node> skip(int? count) =>
      (super.noSuchMethod(Invocation.method(#skip, [count]),
          returnValue: <_i2.Node>[]) as Iterable<_i2.Node>);
  @override
  Iterable<_i2.Node> skipWhile(bool Function(_i2.Node)? test) =>
      (super.noSuchMethod(Invocation.method(#skipWhile, [test]),
          returnValue: <_i2.Node>[]) as Iterable<_i2.Node>);
  @override
  Iterable<_i2.Node> take(int? count) =>
      (super.noSuchMethod(Invocation.method(#take, [count]),
          returnValue: <_i2.Node>[]) as Iterable<_i2.Node>);
  @override
  Iterable<_i2.Node> takeWhile(bool Function(_i2.Node)? test) =>
      (super.noSuchMethod(Invocation.method(#takeWhile, [test]),
          returnValue: <_i2.Node>[]) as Iterable<_i2.Node>);
  @override
  List<_i2.Node> toList({bool? growable = true}) =>
      (super.noSuchMethod(Invocation.method(#toList, [], {#growable: growable}),
          returnValue: <_i2.Node>[]) as List<_i2.Node>);
  @override
  Set<_i2.Node> toSet() => (super.noSuchMethod(Invocation.method(#toSet, []),
      returnValue: <_i2.Node>{}) as Set<_i2.Node>);
  @override
  List<R> cast<R>() =>
      (super.noSuchMethod(Invocation.method(#cast, []), returnValue: <R>[])
          as List<R>);
  @override
  void sort([int Function(_i2.Node, _i2.Node)? compare]) =>
      super.noSuchMethod(Invocation.method(#sort, [compare]),
          returnValueForMissingStub: null);
  @override
  void shuffle([_i4.Random? random]) =>
      super.noSuchMethod(Invocation.method(#shuffle, [random]),
          returnValueForMissingStub: null);
  @override
  Map<int, _i2.Node> asMap() =>
      (super.noSuchMethod(Invocation.method(#asMap, []),
          returnValue: <int, _i2.Node>{}) as Map<int, _i2.Node>);
  @override
  List<_i2.Node> operator +(List<_i2.Node>? other) =>
      (super.noSuchMethod(Invocation.method(#+, [other]),
          returnValue: <_i2.Node>[]) as List<_i2.Node>);
  @override
  List<_i2.Node> sublist(int? start, [int? end]) =>
      (super.noSuchMethod(Invocation.method(#sublist, [start, end]),
          returnValue: <_i2.Node>[]) as List<_i2.Node>);
  @override
  Iterable<_i2.Node> getRange(int? start, int? end) =>
      (super.noSuchMethod(Invocation.method(#getRange, [start, end]),
          returnValue: <_i2.Node>[]) as Iterable<_i2.Node>);
  @override
  void fillRange(int? start, int? end, [_i2.Node? fill]) =>
      super.noSuchMethod(Invocation.method(#fillRange, [start, end, fill]),
          returnValueForMissingStub: null);
  @override
  int indexOf(Object? element, [int? start = 0]) =>
      (super.noSuchMethod(Invocation.method(#indexOf, [element, start]),
          returnValue: 0) as int);
  @override
  int indexWhere(bool Function(_i2.Node)? test, [int? start = 0]) =>
      (super.noSuchMethod(Invocation.method(#indexWhere, [test, start]),
          returnValue: 0) as int);
  @override
  int lastIndexOf(Object? element, [int? start]) =>
      (super.noSuchMethod(Invocation.method(#lastIndexOf, [element, start]),
          returnValue: 0) as int);
  @override
  int lastIndexWhere(bool Function(_i2.Node)? test, [int? start]) =>
      (super.noSuchMethod(Invocation.method(#lastIndexWhere, [test, start]),
          returnValue: 0) as int);
  @override
  void setAll(int? index, Iterable<_i2.Node>? iterable) =>
      super.noSuchMethod(Invocation.method(#setAll, [index, iterable]),
          returnValueForMissingStub: null);
}

/// A class which mocks [Node].
///
/// See the documentation for Mockito's code generation for more information.
class MockNode extends _i1.Mock implements _i2.Node {
  MockNode() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set parentNode(_i2.Node? _parentNode) =>
      super.noSuchMethod(Invocation.setter(#parentNode, _parentNode),
          returnValueForMissingStub: null);
  @override
  _i3.LinkedHashMap<Object, String> get attributes =>
      (super.noSuchMethod(Invocation.getter(#attributes),
              returnValue: _FakeLinkedHashMap<Object, String>())
          as _i3.LinkedHashMap<Object, String>);
  @override
  set attributes(_i3.LinkedHashMap<Object, String>? _attributes) =>
      super.noSuchMethod(Invocation.setter(#attributes, _attributes),
          returnValueForMissingStub: null);
  @override
  _i2.NodeList get nodes => (super.noSuchMethod(Invocation.getter(#nodes),
      returnValue: _FakeNodeList()) as _i2.NodeList);
  @override
  set sourceSpan(_i5.FileSpan? _sourceSpan) =>
      super.noSuchMethod(Invocation.setter(#sourceSpan, _sourceSpan),
          returnValueForMissingStub: null);
  @override
  List<_i2.Element> get children =>
      (super.noSuchMethod(Invocation.getter(#children),
          returnValue: <_i2.Element>[]) as List<_i2.Element>);
  @override
  int get nodeType =>
      (super.noSuchMethod(Invocation.getter(#nodeType), returnValue: 0) as int);
  @override
  set text(String? value) => super.noSuchMethod(Invocation.setter(#text, value),
      returnValueForMissingStub: null);
  @override
  _i2.Node clone(bool? deep) =>
      (super.noSuchMethod(Invocation.method(#clone, [deep]),
          returnValue: _FakeNode()) as _i2.Node);
  @override
  void append(_i2.Node? node) =>
      super.noSuchMethod(Invocation.method(#append, [node]),
          returnValueForMissingStub: null);
  @override
  _i2.Node remove() => (super.noSuchMethod(Invocation.method(#remove, []),
      returnValue: _FakeNode()) as _i2.Node);
  @override
  void insertBefore(_i2.Node? node, _i2.Node? refNode) =>
      super.noSuchMethod(Invocation.method(#insertBefore, [node, refNode]),
          returnValueForMissingStub: null);
  @override
  _i2.Node replaceWith(_i2.Node? otherNode) =>
      (super.noSuchMethod(Invocation.method(#replaceWith, [otherNode]),
          returnValue: _FakeNode()) as _i2.Node);
  @override
  bool hasContent() => (super.noSuchMethod(Invocation.method(#hasContent, []),
      returnValue: false) as bool);
  @override
  void reparentChildren(_i2.Node? newParent) =>
      super.noSuchMethod(Invocation.method(#reparentChildren, [newParent]),
          returnValueForMissingStub: null);
  @override
  bool hasChildNodes() =>
      (super.noSuchMethod(Invocation.method(#hasChildNodes, []),
          returnValue: false) as bool);
  @override
  bool contains(_i2.Node? node) =>
      (super.noSuchMethod(Invocation.method(#contains, [node]),
          returnValue: false) as bool);
  @override
  String toString() => super.toString();
}
