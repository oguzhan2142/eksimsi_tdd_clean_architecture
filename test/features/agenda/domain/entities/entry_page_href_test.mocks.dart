// Mocks generated by Mockito 5.0.15 from annotations
// in eksimsi_tdd_clean_architecture/test/features/agenda/domain/entities/entry_page_href_test.dart.
// Do not manually edit this file.

import 'package:eksimsi_tdd_clean_architecture/features/agenda/domain/entities/entry_page_href.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [EntryPageHref].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntryPageHref extends _i1.Mock implements _i2.EntryPageHref {
  MockEntryPageHref() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get body =>
      (super.noSuchMethod(Invocation.getter(#body), returnValue: '') as String);
  @override
  set body(String? _body) => super.noSuchMethod(Invocation.setter(#body, _body),
      returnValueForMissingStub: null);
  @override
  String get p =>
      (super.noSuchMethod(Invocation.getter(#p), returnValue: '') as String);
  @override
  set p(String? _p) => super
      .noSuchMethod(Invocation.setter(#p, _p), returnValueForMissingStub: null);
  @override
  _i2.EntryPageHrefMode get hrefMode =>
      (super.noSuchMethod(Invocation.getter(#hrefMode),
          returnValue: _i2.EntryPageHrefMode.none) as _i2.EntryPageHrefMode);
  @override
  set hrefMode(_i2.EntryPageHrefMode? _hrefMode) =>
      super.noSuchMethod(Invocation.setter(#hrefMode, _hrefMode),
          returnValueForMissingStub: null);
  @override
  bool get isDailyNice =>
      (super.noSuchMethod(Invocation.getter(#isDailyNice), returnValue: false)
          as bool);
  @override
  bool get isNice =>
      (super.noSuchMethod(Invocation.getter(#isNice), returnValue: false)
          as bool);
  @override
  bool get isPopuler =>
      (super.noSuchMethod(Invocation.getter(#isPopuler), returnValue: false)
          as bool);
  @override
  String getHref() =>
      (super.noSuchMethod(Invocation.method(#getHref, []), returnValue: '')
          as String);
  @override
  void toNice() => super.noSuchMethod(Invocation.method(#toNice, []),
      returnValueForMissingStub: null);
  @override
  void toDailyNice() => super.noSuchMethod(Invocation.method(#toDailyNice, []),
      returnValueForMissingStub: null);
  @override
  void toPopuler() => super.noSuchMethod(Invocation.method(#toPopuler, []),
      returnValueForMissingStub: null);
  @override
  void toNone() => super.noSuchMethod(Invocation.method(#toNone, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
