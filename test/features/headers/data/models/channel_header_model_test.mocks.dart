// Mocks generated by Mockito 5.0.15 from annotations
// in eksimsi_tdd_clean_architecture/test/features/headers/data/models/channel_header_model_test.dart.
// Do not manually edit this file.

import 'dart:collection' as _i3;

import 'package:html/dom.dart' as _i4;
import 'package:html/src/css_class_set.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:source_span/source_span.dart' as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeCssClassSet_0 extends _i1.Fake implements _i2.CssClassSet {}

class _FakeLinkedHashMap_1<K, V> extends _i1.Fake
    implements _i3.LinkedHashMap<K, V> {}

class _FakeNodeList_2 extends _i1.Fake implements _i4.NodeList {}

class _FakeElement_3 extends _i1.Fake implements _i4.Element {}

class _FakeNode_4 extends _i1.Fake implements _i4.Node {}

/// A class which mocks [Element].
///
/// See the documentation for Mockito's code generation for more information.
class MockElement extends _i1.Mock implements _i4.Element {
  MockElement() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set endSourceSpan(_i5.FileSpan? _endSourceSpan) =>
      super.noSuchMethod(Invocation.setter(#endSourceSpan, _endSourceSpan),
          returnValueForMissingStub: null);
  @override
  int get nodeType =>
      (super.noSuchMethod(Invocation.getter(#nodeType), returnValue: 0) as int);
  @override
  String get text =>
      (super.noSuchMethod(Invocation.getter(#text), returnValue: '') as String);
  @override
  set text(String? value) => super.noSuchMethod(Invocation.setter(#text, value),
      returnValueForMissingStub: null);
  @override
  String get outerHtml =>
      (super.noSuchMethod(Invocation.getter(#outerHtml), returnValue: '')
          as String);
  @override
  String get innerHtml =>
      (super.noSuchMethod(Invocation.getter(#innerHtml), returnValue: '')
          as String);
  @override
  set innerHtml(String? value) =>
      super.noSuchMethod(Invocation.setter(#innerHtml, value),
          returnValueForMissingStub: null);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  set id(String? value) => super.noSuchMethod(Invocation.setter(#id, value),
      returnValueForMissingStub: null);
  @override
  String get className =>
      (super.noSuchMethod(Invocation.getter(#className), returnValue: '')
          as String);
  @override
  set className(String? value) =>
      super.noSuchMethod(Invocation.setter(#className, value),
          returnValueForMissingStub: null);
  @override
  _i2.CssClassSet get classes =>
      (super.noSuchMethod(Invocation.getter(#classes),
          returnValue: _FakeCssClassSet_0()) as _i2.CssClassSet);
  @override
  set parentNode(_i4.Node? _parentNode) =>
      super.noSuchMethod(Invocation.setter(#parentNode, _parentNode),
          returnValueForMissingStub: null);
  @override
  _i3.LinkedHashMap<Object, String> get attributes =>
      (super.noSuchMethod(Invocation.getter(#attributes),
              returnValue: _FakeLinkedHashMap_1<Object, String>())
          as _i3.LinkedHashMap<Object, String>);
  @override
  set attributes(_i3.LinkedHashMap<Object, String>? _attributes) =>
      super.noSuchMethod(Invocation.setter(#attributes, _attributes),
          returnValueForMissingStub: null);
  @override
  _i4.NodeList get nodes => (super.noSuchMethod(Invocation.getter(#nodes),
      returnValue: _FakeNodeList_2()) as _i4.NodeList);
  @override
  set sourceSpan(_i5.FileSpan? _sourceSpan) =>
      super.noSuchMethod(Invocation.setter(#sourceSpan, _sourceSpan),
          returnValueForMissingStub: null);
  @override
  List<_i4.Element> get children =>
      (super.noSuchMethod(Invocation.getter(#children),
          returnValue: <_i4.Element>[]) as List<_i4.Element>);
  @override
  String toString() => super.toString();
  @override
  _i4.Element clone(bool? deep) =>
      (super.noSuchMethod(Invocation.method(#clone, [deep]),
          returnValue: _FakeElement_3()) as _i4.Element);
  @override
  void append(_i4.Node? node) =>
      super.noSuchMethod(Invocation.method(#append, [node]),
          returnValueForMissingStub: null);
  @override
  _i4.Node remove() => (super.noSuchMethod(Invocation.method(#remove, []),
      returnValue: _FakeNode_4()) as _i4.Node);
  @override
  void insertBefore(_i4.Node? node, _i4.Node? refNode) =>
      super.noSuchMethod(Invocation.method(#insertBefore, [node, refNode]),
          returnValueForMissingStub: null);
  @override
  _i4.Node replaceWith(_i4.Node? otherNode) =>
      (super.noSuchMethod(Invocation.method(#replaceWith, [otherNode]),
          returnValue: _FakeNode_4()) as _i4.Node);
  @override
  bool hasContent() => (super.noSuchMethod(Invocation.method(#hasContent, []),
      returnValue: false) as bool);
  @override
  void reparentChildren(_i4.Node? newParent) =>
      super.noSuchMethod(Invocation.method(#reparentChildren, [newParent]),
          returnValueForMissingStub: null);
  @override
  bool hasChildNodes() =>
      (super.noSuchMethod(Invocation.method(#hasChildNodes, []),
          returnValue: false) as bool);
  @override
  bool contains(_i4.Node? node) =>
      (super.noSuchMethod(Invocation.method(#contains, [node]),
          returnValue: false) as bool);
  @override
  _i4.Element? querySelector(String? selector) =>
      (super.noSuchMethod(Invocation.method(#querySelector, [selector]))
          as _i4.Element?);
  @override
  List<_i4.Element> querySelectorAll(String? selector) =>
      (super.noSuchMethod(Invocation.method(#querySelectorAll, [selector]),
          returnValue: <_i4.Element>[]) as List<_i4.Element>);
  @override
  List<_i4.Element> getElementsByTagName(String? localName) =>
      (super.noSuchMethod(Invocation.method(#getElementsByTagName, [localName]),
          returnValue: <_i4.Element>[]) as List<_i4.Element>);
  @override
  List<_i4.Element> getElementsByClassName(String? classNames) => (super
      .noSuchMethod(Invocation.method(#getElementsByClassName, [classNames]),
          returnValue: <_i4.Element>[]) as List<_i4.Element>);
}
